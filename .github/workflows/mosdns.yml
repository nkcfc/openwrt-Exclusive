---
- name: Update dat files
  hosts: all
  become: yes

  vars:
    - base_path: /etc/mosdns
    - restart_daemon: yes
    - daemon_service_name: mosdns
    - clean_up_after: yes

  tasks:
    - name: Check prerequisites
      block:
        - name: Gather package facts
          package_facts:
            manager: apt

        - name: Install jq if jq is absent
          apt:
            name: jq
            state: present
          when: '"jq" not in ansible_facts.packages'

        - name: Install unzip if unzip is absent
          apt:
            name: unzip
            state: present
          when: '"unzip" not in ansible_facts.packages'

        - name: Create project directories if not exist
          file:
            path: "{{ item }}"
            state: directory
            mode: 0755
          loop:
            - "{{ base_path }}/ips"
            - "{{ base_path }}/domains"
            - "{{ base_path }}/custom"
            - "{{ base_path }}/downloads"

    - name: Get latest release tag
      shell: 'curl https://api.github.com/repos/techprober/v2ray-rules-dat/releases/latest --silent |  jq -r ".tag_name"'
      register: latest_release

    - name: Print result
      debug:
        msg: |
          "release_url: https://github.com/techprober/v2ray-rules-dat/releases/tag/{{ latest_release.stdout }}"

    - name: Download dat files with the latest release
      ansible.builtin.get_url:
        url: "https://github.com/techprober/v2ray-rules-dat/releases/download/{{ latest_release.stdout }}/{{ item }}.zip"
        dest: "{{ base_path }}/downloads/{{ item }}-{{ latest_release.stdout }}.zip"
      loop:
        -  "geosite"
        -  "geoip"
      register: download
    
    - name: Unzip artifacts
      block:
        - name: Unzip geosite rules
          shell: |
            unzip -o {{ base_path }}/downloads/geosite-{{ latest_release.stdout }}.zip -d {{ base_path }}/domains
            unzip -o {{ base_path }}/downloads/geoip-{{ latest_release.stdout }}.zip -d {{ base_path }}/ips
    
    - name: Restart daemon service
      ansible.builtin.service:
        name: "{{ daemon_service_name }}"
        state: restarted
      when:
        - restart_daemon
        - download is changed

    - name: Remove raw artifacts
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - "{{ base_path }}/downloads/geosite-{{ latest_release.stdout }}.zip"
        - "{{ base_path }}/downloads/geoip-{{ latest_release.stdout }}.zip"
      when:
        - clean_up_after
        - download is changed
